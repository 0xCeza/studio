/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface VvghstInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfAt(address,uint256)': FunctionFragment;
    'borrowToken(uint256,uint256)': FunctionFragment;
    'claimGaugeRewards()': FunctionFragment;
    'compoundBalancerRewards(bytes,bool)': FunctionFragment;
    'compoundQi()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'depositBPSP(uint256)': FunctionFragment;
    'depositCollateral(uint256,uint256)': FunctionFragment;
    'enter(uint256)': FunctionFragment;
    'getCDR()': FunctionFragment;
    'getCDRTarget(bool)': FunctionFragment;
    'getCurrentAirdrop()': FunctionFragment;
    'getCurrentSnapshotId()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getProfitFee()': FunctionFragment;
    'getSupplyCap()': FunctionFragment;
    'getTotalFees()': FunctionFragment;
    'getVaultID()': FunctionFragment;
    'getWithdrawalFee()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initBalancerGauge(address)': FunctionFragment;
    'initialize(address,string,string,address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'joinPoolController(uint256)': FunctionFragment;
    'leave(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'pause(bool)': FunctionFragment;
    'payBackToken(uint256,uint256)': FunctionFragment;
    'qiAirdropAt(uint256)': FunctionFragment;
    'rebalanceVault()': FunctionFragment;
    'receivedAirdrop(bool)': FunctionFragment;
    'setApprovals()': FunctionFragment;
    'setApproved(address,bool)': FunctionFragment;
    'setCDR(uint256,uint256)': FunctionFragment;
    'setSupplyCap(uint256)': FunctionFragment;
    'snapshot()': FunctionFragment;
    'swapQi()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
    'totalvGHST()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateCreator(address)': FunctionFragment;
    'updateOwner(address)': FunctionFragment;
    'updateProfitFee(uint16)': FunctionFragment;
    'updateWithdrawalFee(uint16)': FunctionFragment;
    'vQiClaimable(address)': FunctionFragment;
    'weeklySnapshot()': FunctionFragment;
    'withdrawBPSP(uint256)': FunctionFragment;
    'withdrawCollateral(uint256,uint256)': FunctionFragment;
    'withdrawERC20(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'balanceOfAt'
      | 'borrowToken'
      | 'claimGaugeRewards'
      | 'compoundBalancerRewards'
      | 'compoundQi'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'depositBPSP'
      | 'depositCollateral'
      | 'enter'
      | 'getCDR'
      | 'getCDRTarget'
      | 'getCurrentAirdrop'
      | 'getCurrentSnapshotId'
      | 'getOwner'
      | 'getProfitFee'
      | 'getSupplyCap'
      | 'getTotalFees'
      | 'getVaultID'
      | 'getWithdrawalFee'
      | 'increaseAllowance'
      | 'initBalancerGauge'
      | 'initialize'
      | 'joinPoolController'
      | 'leave'
      | 'name'
      | 'pause'
      | 'payBackToken'
      | 'qiAirdropAt'
      | 'rebalanceVault'
      | 'receivedAirdrop'
      | 'setApprovals'
      | 'setApproved'
      | 'setCDR'
      | 'setSupplyCap'
      | 'snapshot'
      | 'swapQi'
      | 'symbol'
      | 'totalSupply'
      | 'totalSupplyAt'
      | 'totalvGHST'
      | 'transfer'
      | 'transferFrom'
      | 'updateCreator'
      | 'updateOwner'
      | 'updateProfitFee'
      | 'updateWithdrawalFee'
      | 'vQiClaimable'
      | 'weeklySnapshot'
      | 'withdrawBPSP'
      | 'withdrawCollateral'
      | 'withdrawERC20',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOfAt', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'borrowToken', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claimGaugeRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'compoundBalancerRewards', values: [BytesLike, boolean]): string;
  encodeFunctionData(functionFragment: 'compoundQi', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositBPSP', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositCollateral', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'enter', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getCDR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCDRTarget', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'getCurrentAirdrop', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentSnapshotId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProfitFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSupplyCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVaultID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWithdrawalFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initBalancerGauge', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'joinPoolController', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'leave', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'payBackToken', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'qiAirdropAt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rebalanceVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receivedAirdrop', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setApprovals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setApproved', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setCDR', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setSupplyCap', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'snapshot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'swapQi', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupplyAt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalvGHST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateCreator', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateProfitFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateWithdrawalFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'vQiClaimable', values: [string]): string;
  encodeFunctionData(functionFragment: 'weeklySnapshot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawBPSP', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawCollateral', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawERC20', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimGaugeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'compoundBalancerRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'compoundQi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositBPSP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCDR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCDRTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentAirdrop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentSnapshotId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProfitFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSupplyCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initBalancerGauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'joinPoolController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leave', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payBackToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'qiAirdropAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalanceVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receivedAirdrop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCDR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSupplyCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'snapshot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapQi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalvGHST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCreator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProfitFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vQiClaimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weeklySnapshot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawBPSP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawERC20', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'Snapshot(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Snapshot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SnapshotEventObject {
  id: BigNumber;
}
export type SnapshotEvent = TypedEvent<[BigNumber], SnapshotEventObject>;

export type SnapshotEventFilter = TypedEventFilter<SnapshotEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Vvghst extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VvghstInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAt(account: string, snapshotId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimGaugeRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    compoundBalancerRewards(
      _msg: BytesLike,
      _swap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    compoundQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    convertToAssets(_shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { _assets: BigNumber }>;

    convertToShares(_assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositBPSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getCDR(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCDRTarget(high: boolean, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentAirdrop(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getProfitFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSupplyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWithdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initBalancerGauge(
      _balancerGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      vaultAddress: string,
      targetCDRHigh: BigNumberish,
      targetCDRLow: BigNumberish,
      _withdrawlFeeBP: BigNumberish,
      _profitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    joinPoolController(
      _mai: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pause(
      _setPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    qiAirdropAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    rebalanceVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    receivedAirdrop(
      _swap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setApproved(
      _user: string,
      _approval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCDR(
      _CDRHigh: BigNumberish,
      _CDRLow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSupplyCap(
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    snapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    swapQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalvGHST(overrides?: CallOverrides): Promise<[BigNumber] & { _totalvGHST: BigNumber }>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateProfitFee(
      _profitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vQiClaimable(_user: string, overrides?: CallOverrides): Promise<[BigNumber] & { totalQi: BigNumber }>;

    weeklySnapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawBPSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAt(account: string, snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  borrowToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimGaugeRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  compoundBalancerRewards(
    _msg: BytesLike,
    _swap: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  compoundQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  convertToAssets(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(_assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositBPSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enter(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getCDR(overrides?: CallOverrides): Promise<BigNumber>;

  getCDRTarget(high: boolean, overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

  getSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultID(overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initBalancerGauge(
    _balancerGauge: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    name: string,
    symbol: string,
    vaultAddress: string,
    targetCDRHigh: BigNumberish,
    targetCDRLow: BigNumberish,
    _withdrawlFeeBP: BigNumberish,
    _profitFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  joinPoolController(
    _mai: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  leave(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pause(_setPause: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  payBackToken(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  qiAirdropAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rebalanceVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  receivedAirdrop(
    _swap: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setApproved(
    _user: string,
    _approval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCDR(
    _CDRHigh: BigNumberish,
    _CDRLow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSupplyCap(
    _cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  snapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  swapQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalvGHST(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateCreator(
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateProfitFee(
    _profitFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateWithdrawalFee(
    _withdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vQiClaimable(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  weeklySnapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawBPSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(account: string, snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(vaultID: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimGaugeRewards(overrides?: CallOverrides): Promise<void>;

    compoundBalancerRewards(_msg: BytesLike, _swap: boolean, overrides?: CallOverrides): Promise<void>;

    compoundQi(overrides?: CallOverrides): Promise<void>;

    convertToAssets(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(_assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    depositBPSP(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositCollateral(vaultID: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    enter(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCDR(overrides?: CallOverrides): Promise<BigNumber>;

    getCDRTarget(high: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultID(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initBalancerGauge(_balancerGauge: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      vaultAddress: string,
      targetCDRHigh: BigNumberish,
      targetCDRLow: BigNumberish,
      _withdrawlFeeBP: BigNumberish,
      _profitFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    joinPoolController(_mai: BigNumberish, overrides?: CallOverrides): Promise<void>;

    leave(_share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    pause(_setPause: boolean, overrides?: CallOverrides): Promise<void>;

    payBackToken(vaultID: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    qiAirdropAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceVault(overrides?: CallOverrides): Promise<void>;

    receivedAirdrop(_swap: boolean, overrides?: CallOverrides): Promise<void>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setApproved(_user: string, _approval: boolean, overrides?: CallOverrides): Promise<void>;

    setCDR(_CDRHigh: BigNumberish, _CDRLow: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSupplyCap(_cap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    snapshot(overrides?: CallOverrides): Promise<void>;

    swapQi(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalvGHST(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(arg0: string, arg1: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    updateCreator(_creator: string, overrides?: CallOverrides): Promise<void>;

    updateOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    updateProfitFee(_profitFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateWithdrawalFee(_withdrawalFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vQiClaimable(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    weeklySnapshot(overrides?: CallOverrides): Promise<void>;

    withdrawBPSP(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawCollateral(vaultID: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawERC20(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Snapshot(uint256)'(id?: null): SnapshotEventFilter;
    Snapshot(id?: null): SnapshotEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAt(account: string, snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimGaugeRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    compoundBalancerRewards(
      _msg: BytesLike,
      _swap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    compoundQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    convertToAssets(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(_assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositBPSP(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enter(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getCDR(overrides?: CallOverrides): Promise<BigNumber>;

    getCDRTarget(high: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getProfitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSupplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultID(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initBalancerGauge(
      _balancerGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      vaultAddress: string,
      targetCDRHigh: BigNumberish,
      targetCDRLow: BigNumberish,
      _withdrawlFeeBP: BigNumberish,
      _profitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    joinPoolController(
      _mai: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pause(_setPause: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    qiAirdropAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    receivedAirdrop(_swap: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setApproved(
      _user: string,
      _approval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCDR(
      _CDRHigh: BigNumberish,
      _CDRLow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSupplyCap(_cap: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    snapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    swapQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalvGHST(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateCreator(_creator: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateProfitFee(
      _profitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vQiClaimable(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    weeklySnapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawBPSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfAt(account: string, snapshotId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimGaugeRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    compoundBalancerRewards(
      _msg: BytesLike,
      _swap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    compoundQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    convertToAssets(_shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(_assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositBPSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getCDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCDRTarget(high: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentAirdrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupplyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initBalancerGauge(
      _balancerGauge: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      name: string,
      symbol: string,
      vaultAddress: string,
      targetCDRHigh: BigNumberish,
      targetCDRLow: BigNumberish,
      _withdrawlFeeBP: BigNumberish,
      _profitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    joinPoolController(
      _mai: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _setPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    payBackToken(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    qiAirdropAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceVault(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    receivedAirdrop(
      _swap: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setApproved(
      _user: string,
      _approval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCDR(
      _CDRHigh: BigNumberish,
      _CDRLow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSupplyCap(
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    snapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    swapQi(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(snapshotId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalvGHST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateCreator(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateProfitFee(
      _profitFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vQiClaimable(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weeklySnapshot(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawBPSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
